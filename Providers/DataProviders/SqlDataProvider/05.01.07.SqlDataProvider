if exists (select * from dbo.sysobjects where id = object_id(N'FK_{objectQualifier}Publish_TokenParameters_{objectQualifier}Publish_Tokens') and OBJECTPROPERTY(id, N'IsForeignKey') = 1)
ALTER TABLE {databaseOwner}[{objectQualifier}Publish_Tokens] DROP CONSTRAINT FK_{objectQualifier}Publish_TokenParameters_{objectQualifier}Publish_Tokens
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_Tokens]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table {databaseOwner}[{objectQualifier}Publish_Tokens]
GO

CREATE TABLE {databaseOwner}{objectQualifier}Publish_Tokens
	(
	TokenId int NOT NULL IDENTITY (1, 1),
	TokenTypeId int NOT NULL,
	TokenName nvarchar(255) NOT NULL,
	TokenControl nvarchar(255) NULL
	)  ON [PRIMARY]
GO

ALTER TABLE {databaseOwner}{objectQualifier}Publish_Tokens ADD CONSTRAINT
	PK_{objectQualifier}Publish_Tokens PRIMARY KEY CLUSTERED 
	(
	TokenId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_TokenParameters]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
drop table {databaseOwner}[{objectQualifier}Publish_TokenParameters]
GO



CREATE TABLE {databaseOwner}{objectQualifier}Publish_TokenParameters
	(
	TokenParameterId int NOT NULL IDENTITY (1, 1),
	TokenId int NOT NULL,
	TokenParameterName nvarchar(255) NOT NULL,
	TokenParameterTypeId int NOT NULL
	)  ON [PRIMARY]
GO

ALTER TABLE {databaseOwner}{objectQualifier}Publish_TokenParameters ADD CONSTRAINT
	PK_{objectQualifier}Publish_TokenParameters PRIMARY KEY CLUSTERED 
	(
	TokenParameterId
	) WITH( STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]

GO

ALTER TABLE {databaseOwner}{objectQualifier}Publish_TokenParameters ADD CONSTRAINT
	FK_{objectQualifier}Publish_TokenParameters_{objectQualifier}Publish_Tokens FOREIGN KEY
	(
	TokenId
	) REFERENCES {databaseOwner}{objectQualifier}Publish_Tokens
	(
	TokenId
	) ON UPDATE  NO ACTION 
	 ON DELETE  NO ACTION 	
GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}Publish_fnGetChildItemsLevel]') and OBJECTPROPERTY(id, N'IsTableFunction') = 1)
drop function {databaseOwner}[{objectQualifier}Publish_fnGetChildItemsLevel]
GO

CREATE function {databaseOwner}[{objectQualifier}Publish_fnGetChildItemsLevel](@parentItemID int, @nLevels int, @mItems int)  
returns @hierarchy   
 table   
 (  
	RowId int identity(1,1),
  ParentItemID int,  
  ChildItemID int,  
  ChildItemVersionID int,  
  RelationshipTypeID int,  
  Processed int default 0,  
  Level int default 0,
  SortOrder int
 )  
as  
begin  
  
declare @topLevelRelationshipTypeId int   
set @topLevelRelationshipTypeId = (select relationshiptypeId from {databaseOwner}[{objectQualifier}Publish_RelationshipType] where [relationshipName] = 'Category To Top Level Category')  
declare @itemToParentRelationshipTypeId int  
set @itemToParentRelationshipTypeId = (select relationshiptypeId from {databaseOwner}[{objectQualifier}Publish_RelationshipType] where [relationshipName] = 'Item To Parent Category')  
declare @itemToRelatedRelationshipTypeId int  
set @itemToRelatedRelationshipTypeId =  (select relationshiptypeId from {databaseOwner}[{objectQualifier}Publish_RelationshipType] where [relationshipName] = 'Item To Related Category')  
declare @rowsAdded int  
  
insert @hierarchy (ParentItemID, ChildItemID, ChildItemVersionId, RelationshipTypeID, [Level], SortOrder)  
select
 parent.ParentItemID, parent.ChildItemID, parent.ChildItemVersionId, parent.RelationshipTypeID, 0, parent.SortOrder
from   
 {databaseOwner}[{objectQualifier}Publish_ItemRelationship] parent  
 join {databaseOwner}[{objectQualifier}Publish_vwItems] vi on (parent.ChildItemId = vi.ItemId and parent.ChildItemVersionId = vi.ItemVersionId)  
where   
 parent.ParentItemID = @parentItemID  
 and parent.RelationshipTypeId in (@topLevelRelationshipTypeId, @itemToParentRelationshipTypeId, @itemToRelatedRelationshipTypeId)  
 and vi.IsCurrentVersion=1  
   
 set @rowsAdded = @@rowcount  
   
 while @rowsAdded > 0  
 begin  
  update @hierarchy set Processed = 1 where Processed = 0  
  
  IF @nLevels > -1  
   /*if we're looking for NLevels */  
   BEGIN  
    insert @hierarchy  
    select   
     t.ChildItemID, child.ChildItemID, child.ChildItemVersionId, child.RelationshipTypeID, 0, child.SortOrder, t.[Level]+1  
    from   
     @hierarchy t  
     join {databaseOwner}[{objectQualifier}Publish_ItemRelationship] child on (t.ChildItemID = child.ParentItemID)  
     join {databaseOwner}[{objectQualifier}Publish_vwItems] vi on (child.ChildItemId = vi.ItemId and child.ChildItemVersionId = vi.ItemVersionId)  
    where   
     t.Processed = 1   
     and child.RelationshipTypeId in (@topLevelRelationshipTypeId, @itemToParentRelationshipTypeId, @itemToRelatedRelationshipTypeId)  
     and (select count(*) from @hierarchy tl where tl.parentItemId = t.ChildItemID and tl.ChildItemId = child.ChildItemID and tl.RelationshipTypeID= child.RelationshipTypeID) < 1  
     and vi.IsCurrentVersion=1  
     and [level] < @nLevels  
   END  
  ELSE  
   BEGIN  
    insert @hierarchy  
    select   
     t.ChildItemID, child.ChildItemID, child.ChildItemVersionId, child.RelationshipTypeID, 0, child.SortOrder, t.[Level]+1  
    from   
     @hierarchy t  
     join {databaseOwner}[{objectQualifier}Publish_ItemRelationship] child on (t.ChildItemID = child.ParentItemID)  
     join {databaseOwner}[{objectQualifier}Publish_vwItems] vi on (child.ChildItemId = vi.ItemId and child.ChildItemVersionId = vi.ItemVersionId)  
    where   
     t.Processed = 1   
     and child.RelationshipTypeId in (@topLevelRelationshipTypeId, @itemToParentRelationshipTypeId, @itemToRelatedRelationshipTypeId)  
     and (select count(*) from @hierarchy tl where tl.parentItemId = t.ChildItemID and tl.ChildItemId = child.ChildItemID and tl.RelationshipTypeID= child.RelationshipTypeID) < 1  
     and vi.IsCurrentVersion=1 
   END   

  set @rowsAdded = @@rowcount  
   
  update @hierarchy set Processed = 2 where Processed = 1  
 end  


 delete from @hierarchy 
 where
rowid not in (select min(rowid) from @hierarchy group by childitemid)
 return  
end    
GO

