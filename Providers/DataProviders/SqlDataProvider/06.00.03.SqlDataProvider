if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}publish_spGetItemsForTags]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}publish_spGetItemsForTags]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}publish_spGetItemsForTags] 
	@PortalId int,
	@TagList nvarchar(4000) = null
AS

SET Transaction Isolation Level Read UNCOMMITTED

	declare @xmlDoc int
	EXEC sp_xml_preparedocument @xmlDoc OUTPUT, @TagList

	CREATE TABLE #Tags
	(
		[TagId] int
	)

	insert into #Tags ([TagId])
	select CONVERT(nvarchar(255), [text])
	from OPENXML(@xmlDoc, '/Tags/Tag/', 2)
	where [text] is not null

		
	declare @TagCount int

	select @TagCount = count(1) from #Tags
	

	select  [name] as 'ChildName', Thumbnail, itemId as 'ChildItemId', ItemVersionId
	, ItemVersionIdentifier, description as 'ChildDescription', StartDate, CreatedDate, AuthorUserId
	, u.DisplayName, vi.Author, vi.ItemTypeId as 'ChildItemTypeId'
	, LastUpdated, Ltrim(str(itemId)) + '-' + [name] as 'listName'
	from {objectQualifier}publish_vwitems vi
	join {objectQualifier}users u on (u.UserId = vi.AuthorUserId)
	where vi.itemversionid in (
		select distinct  ivt.itemversionid
		from {objectQualifier}publish_tags t
		inner join {objectQualifier}publish_itemversiontags ivt on t.TagId = ivt.TagId
		where ivt.ItemVersionId in (
				select distinct vi2.ItemVersionId
				from #Tags X
				inner join {objectQualifier}publish_tags t2 on X.[TagId] = t2.TagId
				inner join {objectQualifier}publish_itemversiontags ivt2 on ivt2.TagId = t2.TagId
				inner join {objectQualifier}publish_vwItems vi2 on vi2.ItemVersionId = ivt2.ItemVersionId
				where vi2.IsCurrentVersion = 1
				--group by vi2.ItemVersionId
				--Having count(*) = @TagCount --removed because I don't care if you have two anymore... 
				)
		and vi.PortalId = @PortalId
		Group By t.TagId, ivt.itemversionid
		having t.[TagId] in (select [TagId] from #Tags))

	DROP TABLE #Tags
	EXEC sp_xml_removedocument @xmlDoc

GO



if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}publish_spGetItemsForTagsPaging]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}publish_spGetItemsForTagsPaging]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}publish_spGetItemsForTagsPaging] 
	@PortalId int
	, @TagList nvarchar(4000) = null
	, @index int
	, @pagesize int
	, @sortParameters nvarchar(400)


AS

SET Transaction Isolation Level Read UNCOMMITTED

	declare @xmlDoc int
	EXEC sp_xml_preparedocument @xmlDoc OUTPUT, @TagList

	CREATE TABLE #Tags
	(
		[TagId] int
	)

	insert into #Tags ([TagId])
	select CONVERT(nvarchar(255), [text])
	from OPENXML(@xmlDoc, '/Tags/Tag/', 2)
	where [text] is not null

	
	declare @TagCount int

	select @TagCount = count(1) from #Tags


	declare @sql varchar(8000)
	Create table #tmpResults 
	(
		Id int not null IDENTITY(1,1),
		ChildItemId int, 
		Thumbnail varchar(500), 
		ChildName nvarchar(255), 
		ChildDescription ntext,
		ChildItemTypeId int,
		StartDate datetime,
		LastUpdated datetime,
		CreatedDate datetime,
		AuthorUserId int,
		DisplayName nvarchar(128),
		Author nvarchar(255),
		ItemRelationshipId int,
		SortOrder int,
		TotalRows int,
		ViewCount int,
		CommentCount int
		
	)

	set @sql =  'insert into #tmpResults (
		ChildItemId
		, Thumbnail
		,  ChildName
		, ChildDescription
		, ChildItemTypeId
		, StartDate
		, LastUpdated
		, CreatedDate
		, AuthorUserId
		, DisplayName
		, Author
		, ViewCount
		, CommentCount)'

	set @sql = @sql + ' select 
	itemId as ''ChildItemId''
	, Thumbnail
	, [name] as ''ChildName''
	,  description as ''ChildDescription''
	, vi.ItemTypeId as ''ChildItemTypeId''
	, StartDate
	, LastUpdated
	, CreatedDate
	, AuthorUserId
	, u.DisplayName
	, Author
	, ViewCount
	, CommentCount
	
	from {objectQualifier}publish_vwitems vi
	join {objectQualifier}users u on (u.UserId = vi.AuthorUserId)
	where vi.itemversionid in (
		select distinct  ivt.itemversionid
		from {objectQualifier}publish_tags t
		inner join {objectQualifier}publish_itemversiontags ivt on t.TagId = ivt.TagId
		where ivt.ItemVersionId in (
				select vi2.ItemVersionId
				from #Tags X
				inner join {objectQualifier}publish_tags t2 on X.[TagId] = t2.TagId
				inner join {objectQualifier}publish_itemversiontags ivt2 on ivt2.TagId = t2.TagId
				inner join {objectQualifier}publish_vwItems vi2 on vi2.ItemVersionId = ivt2.ItemVersionId
				where vi2.IsCurrentVersion = 1
				group by vi2.ItemVersionId
				having count(*) = ' + Convert(varchar(20), @TagCount) + '
				)
		and vi.PortalId = ' + Convert(varchar(20), @PortalId) + ' Group By t.TagId, ivt.itemversionid having t.[TagId] in (select [TagId] from #Tags))'

	set @sql = @sql + ' order by  ' + @sortParameters


	exec (@sql)

	DECLARE @rows int

	select @rows = count(*) from #tmpResults

	update #tmpResults set TotalRows = @rows



	if (@PageSize <1)
	 	BEGIN
	 		select * from #tmpResults
	 	END
	ELSE
	 	BEGIN
	 		select * from #tmpResults
	 		where (id >= @index * @PageSize + 1) and id < (@index * @PageSize) + @PageSize + 1
	 	END


	DROP TABLE #Tags


	EXEC sp_xml_removedocument @xmlDoc

GO

