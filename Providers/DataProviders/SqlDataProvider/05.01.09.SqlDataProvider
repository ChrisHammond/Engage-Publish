IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Publish_spGetAdminItemListing]') and OBJECTPROPERTY(id,N'IsProcedure') = 1)
DROP PROCEDURE {databaseOwner}[{objectQualifier}Publish_spGetAdminItemListing]
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Publish_spGetAdminItemListing]    
@ParentItemId int,     
@ItemTypeId int,    
@RelationshipTypeId int,
@otherRelationshipTypeId int,
@ApprovalStatusId int,    
@PortalId int,
@OrderBy nvarchar (100)
AS    
BEGIN
set nocount on    
    
create table #TempTable
(     
 ItemId int not null    
 , ItemVersionId int not null    
)    
    
insert into #TempTable    
select     
 c.ItemId    
 , Max(c.ItemVersionId)
    
from     
 [{objectQualifier}Publish_vwChildItems] c     
where     
 c.ApprovalStatusId = @ApprovalStatusId    
 and (c.RelationshipTypeId = @RelationshipTypeId or c.relationshiptypeId = @otherRelationshipTypeId)  
 and c.PortalID = @PortalId    
 and (c.ParentItemID = @ParentItemId OR @ParentItemId = -1)
 and c.ItemTypeId = @ItemTypeId    
 and not exists (Select * from #TempTable w where w.ItemId = c.itemId)    
group by c.ItemId    
    
set nocount off    
DECLARE @SQLStatement nvarchar(4000)
SELECT @SQLStatement = 'SELECT vi.[Name]     
				 , vi.[Description]    
				 , t.ItemId    
				 , t.ItemVersionId    
				 , vi.IsCurrentVersion
				 , vi.CreatedDate
				 , vi.LastUpdated
				 , u.DisplayName
				 , (select count(ParentItemId) from     
				 [{objectQualifier}Publish_vwChilditems] vci where ParentItemId = t.ItemId and RelationShipTypeId =     
				 (select RelationshipTypeId from [{objectQualifier}Publish_relationshiptype] where relationshipname = ''Item To Parent Category'')    
				 and ItemTypeId =     
				 (select  itemtypeid from [{objectQualifier}Publish_Itemtype] where name = ''Category'')
				 and vci.IsCurrentVersion = 1
				 ) ''ChildCount''
				 
				    
				from #TempTable t 
				join [{objectQualifier}Publish_vwItems] vi on (vi.ItemVersionId = t.ItemVersionId)    
				join [{objectQualifier}Users]  u on (vi.AuthorUserId = u.UserId)
				where vi.ApprovalStatusId = ' + Convert(varchar(5),@ApprovalStatusId)  + ' order by ' + @OrderBy
				-- vi.[Name] 
				
exec(@SQLStatement)
drop table #TempTable
END
GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}publish_spGetItemsForTags]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}publish_spGetItemsForTags]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}publish_spGetItemsForTags] 
	@PortalId int,
	@TagList nvarchar(4000) = null
AS

SET Transaction Isolation Level Read UNCOMMITTED

	declare @xmlDoc int
	EXEC sp_xml_preparedocument @xmlDoc OUTPUT, @TagList

	CREATE TABLE #Tags
	(
		[TagId] nvarchar(255)
	)

	insert into #Tags ([TagId])
	select CONVERT(nvarchar(255), [text])
	from OPENXML(@xmlDoc, '/Tags/Tag/', 2)
	where [text] is not null

	select  [name] as 'ChildName', Thumbnail, itemId as 'ChildItemId', ItemVersionId
	, ItemVersionIdentifier, description as 'ChildDescription', StartDate, CreatedDate, AuthorUserId
	, u.DisplayName, vi.ItemTypeId as 'ChildItemTypeId'
	, LastUpdated, Ltrim(str(itemId)) + '-' + [name] as 'listName'
	from {objectQualifier}publish_vwitems vi
	join {objectQualifier}users u on (u.UserId = vi.AuthorUserId)
	where vi.itemversionid in (
		select distinct  ivt.itemversionid
		from {objectQualifier}publish_tags t
		inner join {objectQualifier}publish_itemversiontags ivt on t.TagId = ivt.TagId
		where ivt.ItemVersionId in (
				select vi2.ItemVersionId
				from #Tags X
				inner join {objectQualifier}publish_tags t2 on Convert(int, X.[TagId]) = t2.TagId
				inner join {objectQualifier}publish_itemversiontags ivt2 on ivt2.TagId = t2.TagId
				inner join {objectQualifier}publish_vwItems vi2 on vi2.ItemVersionId = ivt2.ItemVersionId
				where vi2.IsCurrentVersion = 1
				group by vi2.ItemVersionId
				)
		and vi.PortalId = @PortalId
		Group By t.TagId, ivt.itemversionid
		having t.[TagId] in (select [TagId] from #Tags))

	DROP TABLE #Tags
	EXEC sp_xml_removedocument @xmlDoc

GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}publish_spGetItemsForTagsPaging]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}publish_spGetItemsForTagsPaging]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}publish_spGetItemsForTagsPaging] 
	@PortalId int
	, @TagList nvarchar(4000) = null
	, @index int
	, @pagesize int

AS

SET Transaction Isolation Level Read UNCOMMITTED

	declare @xmlDoc int
	EXEC sp_xml_preparedocument @xmlDoc OUTPUT, @TagList

	CREATE TABLE #Tags
	(
		[TagId] nvarchar(255)
	)

	insert into #Tags ([TagId])
	select CONVERT(nvarchar(255), [text])
	from OPENXML(@xmlDoc, '/Tags/Tag/', 2)
	where [text] is not null

	declare @sql varchar(8000)
	Create table #tmpResults 
	(
		Id int not null IDENTITY(1,1),
		ChildItemId int, 
		Thumbnail varchar(500), 
		ChildName nvarchar(255), 
		ChildDescription ntext,
		ChildItemTypeId int,
		StartDate datetime,
		LastUpdated datetime,
		CreatedDate datetime,
		AuthorUserId int,
		DisplayName nvarchar(128),
		ItemRelationshipId int,
		SortOrder int,
		TotalRows int
	)

	set @sql =  'insert into #tmpResults (
		ChildItemId
		, Thumbnail
		,  ChildName
		, ChildDescription
		, ChildItemTypeId
		, StartDate
		, LastUpdated
		, CreatedDate
		, AuthorUserId
		, DisplayName)'

	set @sql = @sql + ' select 
	itemId as ''ChildItemId''
	, Thumbnail
	, [name] as ''ChildName''
	,  description as ''ChildDescription''
	, vi.ItemTypeId as ''ChildItemTypeId''
	, StartDate
	, LastUpdated
	, CreatedDate
	, AuthorUserId
	, u.DisplayName
	
	from {objectQualifier}publish_vwitems vi
	join {objectQualifier}users u on (u.UserId = vi.AuthorUserId)
	where vi.itemversionid in (
		select distinct  ivt.itemversionid
		from {objectQualifier}publish_tags t
		inner join {objectQualifier}publish_itemversiontags ivt on t.TagId = ivt.TagId
		where ivt.ItemVersionId in (
				select vi2.ItemVersionId
				from #Tags X
				inner join {objectQualifier}publish_tags t2 on Convert(int, X.[TagId]) = t2.TagId
				inner join {objectQualifier}publish_itemversiontags ivt2 on ivt2.TagId = t2.TagId
				inner join {objectQualifier}publish_vwItems vi2 on vi2.ItemVersionId = ivt2.ItemVersionId
				where vi2.IsCurrentVersion = 1
				group by vi2.ItemVersionId
				)
		and vi.PortalId = ' + Convert(varchar(20), @PortalId) + ' Group By t.TagId, ivt.itemversionid having t.[TagId] in (select [TagId] from #Tags))'

	exec (@sql)

	DECLARE @rows int

	select @rows = count(*) from #tmpResults

	update #tmpResults set TotalRows = @rows



	if (@PageSize <1)
	 	BEGIN
	 		select * from #tmpResults
	 	END
	ELSE
	 	BEGIN
	 		select * from #tmpResults
	 		where (id >= @index * @PageSize + 1) and id < (@index * @PageSize) + @PageSize + 1
	 	END


	DROP TABLE #Tags


	EXEC sp_xml_removedocument @xmlDoc

GO




