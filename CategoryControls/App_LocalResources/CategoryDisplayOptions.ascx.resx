<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="chkOverrideable.Text" xml:space="preserve">
    <value>Allow Override from Querystring:</value>
  </data>
  <data name="chkLogBreadCrumb.Text" xml:space="preserve">
    <value>Log breadcrumb:</value>
  </data>
  <data name="lblChooseCategory.Text" xml:space="preserve">
    <value>Choose a Category:</value>
  </data>
  <data name="lblChooseDisplayType.Text" xml:space="preserve">
    <value>Choose a Display Option:</value>
  </data>
  <data name="lblChooseItemType.Text" xml:space="preserve">
    <value>Choose Item Type:</value>
  </data>
  <data name="lblChooseChildDisplay.Text" xml:space="preserve">
    <value>Choose how to display child items:</value>
  </data>
  <data name="lblSortOption.Text" xml:space="preserve">
    <value>Choose a Sort Order:</value>
  </data>
  <data name="lblChooseCategory.Help" xml:space="preserve">
    <value>Choose a default category to display.</value>
  </data>
  <data name="lblChooseCategory.Text1" xml:space="preserve">
    <value>Choose a Category:</value>
  </data>
  <data name="lblChooseChildDisplay.Help" xml:space="preserve">
    <value>Choose how you want to display child items. First level children and their children only, or show all levels of children.</value>
  </data>
  <data name="lblChooseChildDisplay.Text1" xml:space="preserve">
    <value>Format child items:</value>
  </data>
  <data name="lblChooseDisplayType.Help" xml:space="preserve">
    <value>This dropdown box tells the ItemDisplay control which type of display it will be defaulting to.</value>
  </data>
  <data name="lblChooseDisplayType.Text1" xml:space="preserve">
    <value>Type of display :</value>
  </data>
  <data name="lblChooseDisplayType.Text11" xml:space="preserve">
    <value>Choose a Display Option:</value>
  </data>
  <data name="lblChooseItemType.Help" xml:space="preserve">
    <value>You can filter the category to only show items of a certain type.</value>
  </data>
  <data name="lblChooseItemType.Text1" xml:space="preserve">
    <value>Choose Item Type:</value>
  </data>
  <data name="lblLogBreadCrumb.Help" xml:space="preserve">
    <value>If you are using the Engage: Publish Breadcrumb Skinobject you can choose whether this control should insert itself into the breadcrumb log.</value>
  </data>
  <data name="lblLogBreadCrumb.Text" xml:space="preserve">
    <value>Log breadcrumb:</value>
  </data>
  <data name="lblOverrideable.Help" xml:space="preserve">
    <value>Overrideable from the querystring. This will cause the control to load an item based on a querystring parameter. You would only set this value on one control per page.</value>
  </data>
  <data name="lblOverrideable.Text" xml:space="preserve">
    <value>Overrideable:</value>
  </data>
  <data name="lblSortOption.Help" xml:space="preserve">
    <value>How do you want the category sorted.</value>
  </data>
  <data name="lblSortOption.Text1" xml:space="preserve">
    <value>Choose a Sort Order:</value>
  </data>
  <data name="Abstract.Text" xml:space="preserve">
    <value>Title &amp; Abstract</value>
  </data>
  <data name="AlphaAscending.Text" xml:space="preserve">
    <value>Alphabetical (asc)</value>
  </data>
  <data name="AlphaDescending.Text" xml:space="preserve">
    <value>Alphabetical (desc)</value>
  </data>
  <data name="Child-SubChild.Text" xml:space="preserve">
    <value>Subcategory Show All</value>
  </data>
  <data name="ChooseOne.Text" xml:space="preserve">
    <value>[Choose One]</value>
  </data>
  <data name="CreatedAscending.Text" xml:space="preserve">
    <value>Created (asc)</value>
  </data>
  <data name="CreatedDescending.Text" xml:space="preserve">
    <value>Created (desc)</value>
  </data>
  <data name="LastUpdatedAscending.Text" xml:space="preserve">
    <value>Last Updated (asc)</value>
  </data>
  <data name="LastUpdatedDescending.Text" xml:space="preserve">
    <value>Last Updated (desc)</value>
  </data>
  <data name="ShowAll.Text" xml:space="preserve">
    <value>Regular</value>
  </data>
  <data name="Title.Text" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="Thumbnail.Text" xml:space="preserve">
    <value>Title, Abstract, &amp; Thumbnail</value>
  </data>
  <data name="TitleAndThumbnail.Text" xml:space="preserve">
    <value>Title &amp; Thumbnail</value>
  </data>
  <data name="All.Text" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="TopLevel.Text" xml:space="preserve">
    <value>Top Level Categories</value>
  </data>
</root>