<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lblEnableRss.Text" xml:space="preserve">
    <value>Enable RSS:</value>
  </data>
  <data name="lblEnableRss.Help" xml:space="preserve">
    <value>If you want to turn on RSS links check this box.  RSS only applies to the Most Recent data type.</value>
  </data>
  <data name="plItemType.Text" xml:space="preserve">
    <value>Select an item type to Display:</value>
  </data>
  <data name="plDataType.Text" xml:space="preserve">
    <value>Select the type of data to Display:</value>
  </data>
  <data name="ddlCategory.Text" xml:space="preserve">
    <value>Select the Category</value>
  </data>
  <data name="plFormatType.Text" xml:space="preserve">
    <value>Select the format of the data to Display:</value>
  </data>
  <data name="plMaxItems.Text" xml:space="preserve">
    <value>Max Items to Display (-1 to show all):</value>
  </data>
  <data name="ddlCategory.Help" xml:space="preserve">
    <value>Choose the category where your items will come from.</value>
  </data>
  <data name="plDataType.Help" xml:space="preserve">
    <value>Choose whether you would like to show the most popular items, most recently updated items, or an alphabetical list of items.</value>
  </data>
  <data name="plFormatType.Help" xml:space="preserve">
    <value>Choose how you would like the items to display. Either as a list of only titles, or titles with thumbnails and abstract summaries added.</value>
  </data>
  <data name="plItemType.Help" xml:space="preserve">
    <value>You can filter the category to only show items of a certain type.</value>
  </data>
  <data name="plMaxItems.Help" xml:space="preserve">
    <value>The maximum number of items to display in this Item Listing.</value>
  </data>
  <data name="Abstract.Text" xml:space="preserve">
    <value>Title &amp; Abstract</value>
  </data>
  <data name="ChooseOne.Text" xml:space="preserve">
    <value>[Please select an Item Type]</value>
  </data>
  <data name="ItemListing.Text" xml:space="preserve">
    <value>Alphabetical</value>
  </data>
  <data name="Title.Text" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="MostPopular.Text" xml:space="preserve">
    <value>Most Popular</value>
  </data>
  <data name="MostRecent.Text" xml:space="preserve">
    <value>Most Recent</value>
  </data>
  <data name="NoCategory.Text" xml:space="preserve">
    <value>[Top Level]</value>
  </data>
  <data name="Thumbnail.Text" xml:space="preserve">
    <value>Title, Abstract, &amp; Thumbnail</value>
  </data>
  <data name="TitleAndThumbnail.Text" xml:space="preserve">
    <value>Title &amp; Thumbnail</value>
  </data>
  <data name="lblShowParent.Text" xml:space="preserve">
    <value>Show Parent Category:</value>
  </data>
  <data name="lblShowParent.Help" xml:space="preserve">
    <value>Check this box if you want each item listing to begin with the item's parent category.</value>
  </data>
  <data name="fvMaxItems.Text" xml:space="preserve">
    <value>Value must be an Integer</value>
  </data>
</root>